Product.update_all(published: true)
exit
exit
Product.update_all(published: true)
exit
Product.update_all(has_stock: true)
Product.update_all(has_stock: true)
exit
OrderProduct.all.each do |op|\
  wp = WorkdayProduct.find(op.workday_id)\
  op.update(product_id: wp.product_id)\
end
OrderProduct.all.each do |op|\
  wp = WorkdayProduct.find(op.workday_product_id)\
  op.update(product_id: wp.product_id)\
end
OrderProduct.all.each do |op|\
  wp = WorkdayProduct.find(op.workday_product_id)\
  op.update(product_id: wp.product_id)\
end
WorkdayProduct.count

OrderProduct.all.each do |op|\
  pp op.workday_product_id\
end
OrderProducroduct_id)\
  op.update(product_id: wp.product_id)\
end
OrderProduct.all.each do |op|\
  wp = WorkdayProduct.find_by(id: op.workday_product_id)\
  op.update(product_id: wp.product_id) if wp.present?\
end
OrderProduct.all.each do |op|\
  wp = WorkdayProduct.where(id: op.workday_product_id).take\
  op.update(product_id: wp.product_id) if wp.present?\
end
op = OrderProduct.first
wp = WorkdayProduct.where(id: op.workday_product_id).take
wp
op.update(product_id: wp.product_id)
op
op.valid?
op.errors?
op.errors
  product = Product.joins(:workday_products).where(workday_products: { id: op.workday_product_id}).take
OrderProduct.all.each do |op|\
  product = Product.joins(:workday_products).where(workday_products: { id: op.workday_product_id}).take\
  op.update(product: product, unit_price: product.price) if product.present?\
end
exit
